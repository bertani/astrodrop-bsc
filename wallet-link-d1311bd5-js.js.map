{"version":3,"sources":["./node_modules/bnc-onboard/dist/esm/wallet-link-d1311bd5.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA,4EAA4E,MAAM,0BAA0B,wBAAwB,EAAE,gBAAgB,eAAe,QAAQ,EAAE,iBAAiB,gBAAgB,EAAE,OAAO,4CAA4C,EAAE;;AAEvQ,gCAAgC,qBAAqB,mCAAmC,gDAAgD,gCAAgC,wBAAwB,wEAAwE,EAAE,uBAAuB,uEAAuE,EAAE,kBAAkB,EAAE,EAAE,GAAG;;AAEnU;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,4DAAY;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,gQAAoB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,2BAA2B;AAC3B,yBAAyB;AACzB,uBAAuB;AACvB,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEe,yEAAU,E","file":"wallet-link-d1311bd5-js.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { c as coinbaseIcon } from './icon-coinbase-7f74eb94.js';\n\nfunction walletLink(options) {\n  var rpcUrl = options.rpcUrl,\n      appName = options.appName,\n      appLogoUrl = options.appLogoUrl,\n      networkId = options.networkId,\n      preferred = options.preferred,\n      label = options.label,\n      iconSrc = options.iconSrc,\n      svg = options.svg;\n  return {\n    name: label || 'Coinbase Wallet',\n    svg: svg || coinbaseIcon,\n    iconSrc: iconSrc,\n    wallet: function () {\n      var _wallet = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(helpers) {\n        var getBalance, getAddress, getNetwork, _yield$import, WalletLink, instance, provider;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                getBalance = helpers.getBalance, getAddress = helpers.getAddress, getNetwork = helpers.getNetwork;\n                _context.next = 3;\n                return import('walletlink');\n\n              case 3:\n                _yield$import = _context.sent;\n                WalletLink = _yield$import[\"default\"];\n                instance = new WalletLink({\n                  appName: appName,\n                  appLogoUrl: appLogoUrl\n                });\n                provider = instance.makeWeb3Provider(rpcUrl, networkId);\n                return _context.abrupt(\"return\", {\n                  provider: provider,\n                  \"interface\": {\n                    name: 'Coinbase Wallet',\n                    connect: function connect() {\n                      return new Promise(function (resolve, reject) {\n                        provider.enable().then(function (res) {\n                          return resolve(res);\n                        })[\"catch\"](function () {\n                          return reject({\n                            message: 'This dapp needs access to your account information.'\n                          });\n                        });\n                      });\n                    },\n                    disconnect: function disconnect() {\n                      provider.disconnect();\n                    },\n                    address: {\n                      get: function get() {\n                        return getAddress(provider);\n                      }\n                    },\n                    network: {\n                      get: function get() {\n                        return getNetwork(provider);\n                      }\n                    },\n                    balance: {\n                      get: function get() {\n                        return getBalance(provider);\n                      }\n                    }\n                  }\n                });\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function wallet(_x) {\n        return _wallet.apply(this, arguments);\n      }\n\n      return wallet;\n    }(),\n    type: 'sdk',\n    desktop: true,\n    preferred: preferred\n  };\n}\n\nexport default walletLink;"],"sourceRoot":"webpack:///"}